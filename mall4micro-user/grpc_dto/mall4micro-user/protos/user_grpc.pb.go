// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcUserInfoByUsernameSrvClient is the client API for RpcUserInfoByUsernameSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcUserInfoByUsernameSrvClient interface {
	CallRpcUserInfoByUsernameSrv(ctx context.Context, in *RpcUserInfoByUsernameRequest, opts ...grpc.CallOption) (*RpcUserInfoReply, error)
}

type rpcUserInfoByUsernameSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcUserInfoByUsernameSrvClient(cc grpc.ClientConnInterface) RpcUserInfoByUsernameSrvClient {
	return &rpcUserInfoByUsernameSrvClient{cc}
}

func (c *rpcUserInfoByUsernameSrvClient) CallRpcUserInfoByUsernameSrv(ctx context.Context, in *RpcUserInfoByUsernameRequest, opts ...grpc.CallOption) (*RpcUserInfoReply, error) {
	out := new(RpcUserInfoReply)
	err := c.cc.Invoke(ctx, "/dto.RpcUserInfoByUsernameSrv/CallRpcUserInfoByUsernameSrv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcUserInfoByUsernameSrvServer is the server API for RpcUserInfoByUsernameSrv service.
// All implementations must embed UnimplementedRpcUserInfoByUsernameSrvServer
// for forward compatibility
type RpcUserInfoByUsernameSrvServer interface {
	CallRpcUserInfoByUsernameSrv(context.Context, *RpcUserInfoByUsernameRequest) (*RpcUserInfoReply, error)
	mustEmbedUnimplementedRpcUserInfoByUsernameSrvServer()
}

// UnimplementedRpcUserInfoByUsernameSrvServer must be embedded to have forward compatible implementations.
type UnimplementedRpcUserInfoByUsernameSrvServer struct {
}

func (UnimplementedRpcUserInfoByUsernameSrvServer) CallRpcUserInfoByUsernameSrv(context.Context, *RpcUserInfoByUsernameRequest) (*RpcUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallRpcUserInfoByUsernameSrv not implemented")
}
func (UnimplementedRpcUserInfoByUsernameSrvServer) mustEmbedUnimplementedRpcUserInfoByUsernameSrvServer() {
}

// UnsafeRpcUserInfoByUsernameSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcUserInfoByUsernameSrvServer will
// result in compilation errors.
type UnsafeRpcUserInfoByUsernameSrvServer interface {
	mustEmbedUnimplementedRpcUserInfoByUsernameSrvServer()
}

func RegisterRpcUserInfoByUsernameSrvServer(s grpc.ServiceRegistrar, srv RpcUserInfoByUsernameSrvServer) {
	s.RegisterService(&RpcUserInfoByUsernameSrv_ServiceDesc, srv)
}

func _RpcUserInfoByUsernameSrv_CallRpcUserInfoByUsernameSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcUserInfoByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserInfoByUsernameSrvServer).CallRpcUserInfoByUsernameSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dto.RpcUserInfoByUsernameSrv/CallRpcUserInfoByUsernameSrv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserInfoByUsernameSrvServer).CallRpcUserInfoByUsernameSrv(ctx, req.(*RpcUserInfoByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcUserInfoByUsernameSrv_ServiceDesc is the grpc.ServiceDesc for RpcUserInfoByUsernameSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcUserInfoByUsernameSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dto.RpcUserInfoByUsernameSrv",
	HandlerType: (*RpcUserInfoByUsernameSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallRpcUserInfoByUsernameSrv",
			Handler:    _RpcUserInfoByUsernameSrv_CallRpcUserInfoByUsernameSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mall4micro-user/protos/user.proto",
}
